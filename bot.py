import os
import logging
import requests
from telegram import Update, InputMediaPhoto
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Bot configuration
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', '8315398034:AAGmipLhKmmliTLNzLDk2dcX6fm9H4xilHg')
DEEPAI_API_KEY = os.getenv('DEEPAI_API_KEY', 'AIzaSyA4nvO7MzmwNh-r56xU7lFa5Vpz2jF-PSc')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a welcome message when the command /start is issued."""
    welcome_message = (
        "🤖 Welcome to The Firm AI Image Generator!\n\n"
        "🎨 Simply describe the image you want to create, and I'll generate it for you using advanced AI technology.\n\n"
        "Example: 'A serene mountain landscape with a lake at sunset'\n\n"
        "✨ Powered by The Firm AI"
    )
    await update.message.reply_text(welcome_message)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /help is issued."""
    help_text = (
        "❓ How to use this bot?\n\n"
        "1. Type a description of the image you want to create\n"
        "2. Wait a moment while I generate your image\n"
        "3. Enjoy your unique creation!\n\n"
        "� Tips for best results:\n"
        "• Be descriptive in your request\n"
        "• Include details about colors and mood\n"
        "• Try different art styles (e.g., impressionist, realistic, cartoon)\n\n"
        "🔹 Brought to you by The Firm AI"
    )
    await update.message.reply_text(help_text)

async def generate_image(prompt: str) -> str:
    """Generate an image from text using the AI API."""
    try:
        response = requests.post(
            "https://api.deepai.org/api/text2img",
            data={
                'text': prompt,
            },
            headers={'api-key': DEEPAI_API_KEY}
        )
        response.raise_for_status()
        return response.json()['output_url']
    except Exception as e:
        logger.error(f"Error generating image: {e}")
        return None

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle incoming messages and generate images."""
    user = update.effective_user
    text = update.message.text
    
    if not text or text.startswith('/'):
        return
    
    # Send "Generating..." message
    generating_message = await update.message.reply_text("⏳ Generating your image with The Firm AI, please wait...")
    
    try:
        # Generate the image
        image_url = await generate_image(text)
        
        if image_url:
            # Send the generated image
            await context.bot.send_photo(
                chat_id=update.effective_chat.id,
                photo=image_url,
                caption=f"🎨 Generated by The Firm AI\n\nPrompt: {text}"
            )
            # Delete the "Generating..." message
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=generating_message.message_id
            )
        else:
            await update.message.reply_text("❌ Sorry, there was an error generating your image. Please try again later.\n\nPowered by The Firm AI")
    except Exception as e:
        logger.error(f"Error in handle_message: {e}")
        await update.message.reply_text("❌ Sorry, an unexpected error occurred. Please try again later.\n\nPowered by The Firm AI")

def main() -> None:
    """Start the bot."""
    # Create the Application
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Start the Bot
    application.run_polling()

if __name__ == '__main__':
    main()
