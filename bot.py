import os
import logging
import requests
from telegram import Update, ParseMode
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Bot configuration
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
DEEPAI_API_KEY = os.getenv('DEEPAI_API_KEY')

# Validate required environment variables
if not TELEGRAM_TOKEN or not DEEPAI_API_KEY:
    logger.error("Missing required environment variables. Please check your .env file or environment settings.")
    exit(1)

def start(update: Update, context: CallbackContext) -> None:
    """Send a welcome message when the command /start is issued."""
    welcome_message = (
        "🤖 Welcome to The Firm AI Image Generator!\n\n"
        "🎨 Simply describe the image you want to create, and I'll generate it for you using advanced AI technology.\n\n"
        "Example: 'A serene mountain landscape with a lake at sunset'\n\n"
        "✨ Powered by The Firm AI"
    )
    update.message.reply_text(welcome_message)

def help_command(update: Update, context: CallbackContext) -> None:
    """Send a message when the command /help is issued."""
    help_text = (
        "🛠 *How to use The Firm AI Image Generator*\n\n"
        "1. Type any text description of the image you want to generate\n"
        "2. Wait a few moments while I create your image\n"
        "3. Receive your AI-generated image!\n\n"
        "Example prompts:\n"
        "• A futuristic city at night with flying cars\n"
        "• A cute panda eating bamboo in a forest\n"
        "• A beautiful sunset over the ocean\n\n"
        "✨ *Powered by The Firm AI*"
    )
    update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)

def generate_image(prompt: str) -> str:
    """Generate an image from text using the DeepAI API."""
    try:
        response = requests.post(
            "https://api.deepai.org/api/text2img",
            data={'text': prompt},
            headers={'api-key': DEEPAI_API_KEY}
        )
        response.raise_for_status()
        return response.json().get('output_url')
    except Exception as e:
        logger.error(f"Error generating image: {e}")
        return None

def handle_message(update: Update, context: CallbackContext) -> None:
    """Handle incoming messages and generate images."""
    if not update.message or not update.message.text:
        return

    text = update.message.text
    if text.startswith('/'):  # Skip commands
        return

    # Send a "generating" message
    generating_message = update.message.reply_text(
        "⏳ Generating your image with The Firm AI, please wait..."
    )

    try:
        # Generate the image
        image_url = generate_image(text)
        
        if image_url:
            # Send the generated image
            update.message.reply_photo(
                photo=image_url,
                caption=f"🎨 Generated by The Firm AI\n\nPrompt: {text}"
            )
            # Delete the "generating" message
            context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=generating_message.message_id
            )
        else:
            update.message.reply_text(
                "❌ Sorry, there was an error generating your image. Please try again later.\n\n"
                "Powered by The Firm AI"
            )
    except Exception as e:
        logger.error(f"Error in handle_message: {e}")
        update.message.reply_text(
            "❌ Sorry, an unexpected error occurred. Please try again later.\n\n"
            "Powered by The Firm AI"
        )

def error(update: Update, context: CallbackContext) -> None:
    """Log Errors caused by Updates."""
    logger.warning('Update "%s" caused error "%s"', update, context.error)

def main() -> None:
    """Start the bot."""
    # Create the Updater and pass it your bot's token.
    updater = Updater(TELEGRAM_TOKEN)

    # Get the dispatcher to register handlers
    dp = updater.dispatcher

    # on different commands - answer in Telegram
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help_command))

    # on non-command messages - generate image
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    # log all errors
    dp.add_error_handler(error)

    # Start the Bot
    updater.start_polling()

    # Run the bot until you press Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()

if __name__ == '__main__':
    main()
